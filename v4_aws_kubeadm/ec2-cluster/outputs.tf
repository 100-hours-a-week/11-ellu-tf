output "control_plane_public_ip" {
  description = "Public IP address of the Kubernetes control plane node"
  value       = module.kubernetes.control_plane_public_ip
}

output "control_plane_private_ip" {
  description = "Private IP address of the Kubernetes control plane node"
  value       = module.kubernetes.control_plane_private_ip
}

output "worker_public_ips" {
  description = "Public IP addresses of the Kubernetes worker nodes"
  value       = module.kubernetes.worker_public_ips
}

output "worker_private_ips" {
  description = "Private IP addresses of the Kubernetes worker nodes"
  value       = module.kubernetes.worker_private_ips
}

output "kafka_node_public_ip" {
  description = "Public IP address of the Kafka node"
  value       = module.kubernetes.kafka_node_public_ip
}

output "kafka_node_private_ip" {
  description = "Private IP address of the Kafka node"
  value       = module.kubernetes.kafka_node_private_ip
}

output "rds_primary_endpoint" {
  description = "Primary RDS instance endpoint"
  value       = module.rds.rds_primary_endpoint
}

# output "rds_replica_endpoint" {
#   description = "Replica RDS instance endpoint"
#   value       = module.rds.rds_replica_endpoint
# }

output "cluster_setup_instructions" {
  description = "kubeadm ÌÅ¥Îü¨Ïä§ÌÑ∞ ÏÑ§Ï†ï ÏïàÎÇ¥"
  value = <<-EOT
    
    üöÄ KUBERNETES ÌÅ¥Îü¨Ïä§ÌÑ∞ ÏÑ§Ï†ï ÏïàÎÇ¥ 
    ==========================================

    Ìï¥Îãπ Î™ÖÎ†πÏñ¥Îì§ÏùÄ ÏûëÏÑ±Ïûê(ÍπÄÎ≤îÏàò/Brian)Ïùò Î°úÏª¨ ÌôòÍ≤ΩÏóêÏÑú Ïã§ÌñâÎêòÎäî Î™ÖÎ†πÏñ¥Îì§ÏûÖÎãàÎã§.
    ÎÇòÏó¥Îêú Î™ÖÎ†πÏñ¥Í∞Ä Ïã§Ï†ú Î™©Ï†ÅÏóê ÎßûÍ≤å ÏûëÎèôÌïòÏßÄ ÏïäÏùÑ Ïàò ÏûàÏúºÎ©∞, ÌÇ§ ÏÉùÏÑ±, path directory, IP Ï£ºÏÜå Îì±, kubectl Î™ÖÎ†πÏñ¥Îì§ÏùÑ ÏûëÏÑ±ÏûêÏùò ÌôòÍ≤ΩÏóê ÎßûÍ≤å ÏàòÏ†ïÌï¥Ïïº Ìï©ÎãàÎã§.
    
    1. Control Plane node ssh Ï†ëÏÜç:
       ssh -i ./.ssh/${var.key_name}.pem ubuntu@${module.kubernetes.control_plane_public_ip}

    2. Worker node ssh Ï†ëÏÜç :
        worker nodes
       ${join("\n       ", [for ip in module.kubernetes.worker_public_ips : "ssh -i ./.ssh/${var.key_name}.pem ubuntu@${ip}"])}

       ==========================================
        kafka node
        ssh -i ./.ssh/${var.key_name}.pem ubuntu@${module.kubernetes.kafka_node_public_ip}

    3. Control Plane Ï¥àÍ∏∞Ìôî:
        sudo kubeadm config images pull

        sudo kubeadm init

        mkdir -p "$HOME"/.kube
        sudo cp -i /etc/kubernetes/admin.conf "$HOME"/.kube/config
        sudo chown "$(id -u)":"$(id -g)" "$HOME"/.kube/config

        # ÎÑ§Ìä∏ÏõåÌÅ¨ ÌîåÎü¨Í∑∏Ïù∏ = calico
        kubectl apply -f https://raw.githubusercontent.com/projectcalico/calico/v3.26.0/manifests/calico.yaml
    
    4. kubeadm token Î∞úÌñâ:
        kubeadm token create --print-join-command
    
    5. Worder Nodes Ï¥àÍ∏∞Ìôî:
        sudo kubeadm reset pre-flight checks

    6. 4Î≤àÏùò Ï∂úÎ†•Í∞íÏùÑ Î≥µÏÇ¨ÌõÑ sudo Í∂åÌïúÏúºÎ°ú worker nodeÏóêÏÑú Ïã§Ìñâ
       
    7. Control Plane nodeÏóêÏÑú kubectl Î™ÖÎ†πÏñ¥ Ïã§Ìñâ:
        kubectl get nodes
    
    8. Worker nodes role Ï∂îÍ∞Ä:
        kubectl label node <ip-10-1-0-0> node-role.kubernetes.io/worker=reserved
        kubectl label node <ip-10-1-0-0> node-role.kubernetes.io/worker=reserved
        kubectl label node <ip-10-1-0-0> node-role.kubernetes.io/kafka=reserved
    9. Kafka worker node taint Ï∂îÍ∞Ä:
        kubectl taint node <ip-10-1-0-0> node-role.kubernetes.io/kafka=reserved:NoSchedule
    üìù DB Ï£ºÏÜå:
    - Primary RDS: ${module.rds.rds_primary_endpoint}
    
  EOT
}

output "ssh_commands" {
  description = "SSH commands for easy access"
  value = {
    control_plane = "ssh -i ${var.key_name}.pem ubuntu@${module.kubernetes.control_plane_public_ip}"
    workers = [for ip in module.kubernetes.worker_public_ips : "ssh -i ${var.key_name}.pem ubuntu@${ip}"]
  }
}

output "nlb_dns_name" {
  description = "DNS name of the Network Load Balancer"
  value       = module.nlb.nlb_dns_name
}

output "nlb_configuration" {
  description = "NLB configuration details"
  value = {
    dns_name     = module.nlb.nlb_dns_name
    zone_id      = module.nlb.nlb_zone_id
    http_nodeport  = var.nginx_http_nodeport
    https_nodeport = var.nginx_https_nodeport
  }
}